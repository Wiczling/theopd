---
title: "Simple demo"
author:   
  - Pawel Wiczling
date: today
date-format: long
format:
  html:
    toc: true
    code-fold: true
execute:
  warning: false
---

# Introduction

Simple demo demonstrating the use of NONMEM to fit theoph data using bbr package. It's based on [MetrumRG Ecosystem](https://merge.metrumrg.com/expo/expo1-nonmem-foce/).

```{r, message=FALSE}

library(pracma)
library(bbr)
library(dplyr)
library(ggplot2)
library(patchwork)
library(mrgsolve)
library(vpc)
library(pmplots)

library(data.table)
library(tidyverse)
library(glue)
library(whisker)
library(here)

library(pmtables)

# library(mrgmisc)
source("functions/resampling_functions.R") # from mrgmisc

```

Some settings:

```{r}

# user specific settings
options(bbr.bbi_exe_path = "C:/Users/pawel/AppData/Roaming/bbi/bbi.exe")

data_dir <- "../data/derived" 
model_dir <- "../model/nonmem/basic"  
bbi_init(.dir = model_dir,            # the directory to create the bbi.yaml in
         .nonmem_dir = "C:/",         # location of NONMEM installation
         .nonmem_version = "nm74g64")  # default NONMEM version to use
```

# Data

Theoph data is available in R. Several columns needs to be added (AMT, CMT, MDV) for NONMEM

```{r}
data <- Theoph

#' Wt: weight of the subject (kg).
#' Dose: dose of theophylline administered orally to the subject (mg/kg).
#' Time: time since drug administration when the sample was drawn (hr).
#' Conc: theophylline concentration in the sample (mg/L).

data$AMT <- 0
data$MDV <- 0
data$CMT <- 2

dataamt  <- Theoph[!duplicated(Theoph$Subject),]
dataamt$AMT <- dataamt$Dose
dataamt$MDV <- 1
dataamt$conc <- 0
dataamt$CMT <- 1

dataall <- rbind(data,dataamt)
dataall$Subject<-as.numeric(dataall$Subject)
dataall <-  arrange(dataall,Subject, Time)
dataall$NUM <- 1:length(dataall$Subject)

#' mg/kg -> mg
dataall$AMT<-dataall$AMT*dataall$Wt

write.csv(dataall, paste0(data_dir, "/nonmemdata.csv"), row.names=FALSE)
```

Plot raw data:

```{r}
figrawdata <- ggplot(dataall,aes(x=Time,y=conc,group=factor(Subject)))+
  geom_point()+
  geom_line()+
  labs(x="Time (h)", y="Theophylline Concentration (mg/L)")

ggsave(paste0(here::here("deliv/figures"),"/rawdata", ".png"), plot=figrawdata, width = 16, height = 9, units = "cm")

figrawdata
```

# Run NONMEM using bbi

First model:

```{r}
#mod1 <- new_model(file.path(model_dir, 1),  .overwrite = TRUE)
#mod1 <- mod1 %>% add_tags("1-cmt linear model with 1st-order absorption")
#mod1 <- mod1 %>% add_notes("residual error model can be improved")
mod1 <- read_model(file.path(model_dir, 1))

```

```{r, eval = FALSE}
submit_model(mod1, .mode = "local")
```

Second model has an combined residual error model:

```{r}
#mod2 <- new_model(file.path(model_dir, 2),  .overwrite = TRUE)
#mod2 <- mod2 %>% add_tags("+proportional error model")
#mod2 <- mod2 %>% add_notes("final")
mod2 <- read_model(file.path(model_dir, 2))
```

```{r, eval = FALSE}
submit_model(mod2, .mode = "local")
```

Compare models:

```{r}
log_df <- run_log(model_dir)
log_df%>%
  select(-c(absolute_model_path,yaml_md5))%>%
  kableExtra::kable()
  
```

## Models summary

```{r}
cat("Model 1")

label_df <- mod1 %>% 
  param_labels() %>% 
  apply_indices() 

param_df <- mod1 %>% 
  model_summary() %>% 
  param_estimates()

report_df <- inner_join(
  label_df %>% select(-param_type),
  param_df %>% select(parameter_names, estimate, stderr, fixed),
  by = "parameter_names"
)%>%
  filter(fixed==FALSE) %>%
  select(-fixed)

report_df  %>% knitr::kable()

cat("Model 2")

label_df <- mod2 %>% 
  param_labels() %>% 
  apply_indices() 

param_df <- mod2 %>% 
  model_summary() %>% 
  param_estimates()

report_df <- inner_join(
  label_df %>% select(-param_type),
  param_df %>% select(parameter_names, estimate, stderr, fixed),
  by = "parameter_names"
) %>%
   filter(fixed==FALSE) %>%
   select(-fixed)

report_df  %>% knitr::kable()
```

```{r}
summary_log(model_dir, .include = 1:2) %>%
  select(run, ofv, condition_number, any_heuristics) %>% knitr::kable()
```

## Plot model fits

```{r}
join_df <- nm_join(mod2) 
join_df %>% 
  select(NUM, ID, TIME, CONC, IPRED, PRED)
```

Model predictions:

```{r}
ggplot(subset(join_df,MDV==0),aes(x=TIME,y=CONC))+
  geom_point()+
  geom_line(aes(x=TIME,y=PRED), linetype=2)+
  geom_line(aes(x=TIME,y=IPRED))+
  labs( x="Time (h)", y="Theophylline Concentration (mg/L)")+
  facet_wrap(.~ID)
```

Some GOF plots:

```{r}

p1<-ggplot(subset(join_df,MDV==0),aes(x=IPRED,y=CONC))+
  geom_point()+
  geom_abline(intercept = 0, slope = 1, linetype=2, color="gray")+
  labs( x="IPRED", y="CONC")

p2<-ggplot(subset(join_df,MDV==0),aes(x=PRED,y=CONC))+
  geom_point()+
  geom_abline(intercept = 0, slope =1, linetype=2, color="gray")+
  labs( x="PRED", y="CONC")

p3<-ggplot(subset(join_df,MDV==0),aes(x=TIME,y=CWRES))+
  geom_point()+
  geom_hline(yintercept = 0, linetype=2, color="gray") + 
  labs( x="Time (h)", y="CWRES")

p4<-ggplot(subset(join_df,MDV==0),aes(x=PRED,y=CWRES))+
  geom_point()+
  geom_hline(yintercept = 0, linetype=2, color="gray")+
  labs( x="PRED", y="CWRES")

(p1+p2)/(p3+p4)

```

GOF plots using pmplots:

```{r}
p1 <- cwres_time(join_df) 
p2 <- cwres_pred(join_df) 
p3 <- cwres_hist(join_df) 
p4 <- npde_pred(join_df) 
(p1+p2)/(p3+p4)
```

## Covariate relationships

```{r}
ggplot(distinct(join_df,ID,.keep_all = TRUE),aes(x=WT,y=CL))+
  geom_point()+
  geom_smooth(method = 'loess',formula = 'y ~ x', se = FALSE, linetype=2, color="gray")+
  labs(x="Body Weight (kg)", y="CL (L/h)")
```

# Simulations using mrgsolve

```{r}
model_specification <- '
$PROB 1-CMT Linear Model with 1st-Order Absorption

$CMT GUT CENT
$PKMODEL ncmt=1, depot=TRUE

$NMEXT
run = "2"
project = here::here("model/nonmem/basic")
root = "cppfile"

olabels = c("ECL", "EVC", "EKA")
slabels = c("ADD","PROP")

$MAIN
double TVCL = THETA(1);        // Typical Value of Clearance
double CL = TVCL*exp(ETA(1));  // Individual Clearance (L/h)

double TVV = THETA(2);         // Typical Value of Volume
double V = TVV*exp(ETA(2));    // Individual value of Volume (L)

double TVKA = THETA(3);        // Typical Value of absorption rate
double KA = TVKA*exp(ETA(3));  // Individual value of Ka (1/h)

F_GUT = 1;          // Bioavailability
double S2 = V; // Dose in mg, conc in mg/L

$TABLE
double IPRED = CENT/S2;
double DV = IPRED *(1+EPS(2))+ EPS(1);

$CAPTURE @etas 1:LAST
IPRED DV CL V KA
'
```

```{r}
simmod <- mcode("mymodel", model_specification)
```

```{r}
param(simmod)
omat(simmod)
smat(simmod)
```

predictions for 300 mg single dose administrtion:

```{r}

data <- expand.ev(amt = rep(300,1000))
simmod %>% 
  data_set(data) %>% 
  mrgsim(end = 25, delta = 0.1)%>%
  as.data.frame() %>%
  group_by(time)%>%
  summarise(mIPRED = median(IPRED), 
            q95IPRED = quantile(IPRED, probs = 0.95), 
            q05IPRED = quantile(IPRED, probs = 0.05)) %>%
  ggplot()+
  geom_line(aes(x=time, y= mIPRED), color = "blue") +
  geom_ribbon(aes(x=time, ymin=q05IPRED, ymax=q95IPRED), fill = "blue", alpha=0.1) + 
  scale_y_log10() +
  labs(x="Time (h)", y="Theophylline Concentration (mg/L)")

```

# Recreate NONMEM fit using mrgsolve

```{r}
out <- mrgsim(
  simmod, 
  data      = join_df, 
  etasrc    = "data.all", 
  obsonly   = TRUE,
  Req       = "MRG = IPRED", 
  carry_out = "NM = IPRED,  CONC") %>%
  as.data.frame() %>%
  ggplot()+
  geom_point(aes(x=TIME,y=CONC))+
  geom_line(aes(x=TIME,y=MRG),color="blue")+
  geom_line(aes(x=TIME,y=NM), linetype=2)+
  labs( x="Time (h)", y="Theophylline Concentration (mg/L)")+
  facet_wrap(.~ID)

print(out)
```

# Visual predictive check

```{r}
mrg_vpc_theme = new_vpc_theme(list(
  sim_pi_fill = "steelblue3", sim_pi_alpha = 0.5,
  sim_median_fill = "grey60", sim_median_alpha = 0.5
))


sim <- function(rep, data, model, recover = "EVID") {
  mrgsim(
    model, 
    data = data,
    carry_out = "NUM",
    recover = recover, 
    Req = "DV", 
    output = "df", 
    quiet  = TRUE
  ) %>%  mutate(irep = rep)
}

isim <- seq(100) # 100 repetitions

set.seed(86486)

sims <- lapply(
  isim, sim, 
  data = join_df, 
  mod = simmod
) %>% bind_rows()

# filter
fjoin_df <-  filter(join_df,  EVID==0)
fsims <- filter(sims, EVID==0)

# make a plot
p1 <- vpc(
  obs = fjoin_df,
  sim = fsims,
  obs_cols = list(dv = "CONC"),
  sim_cols = list(dv = "DV", sim = "irep"), 
  log_y = FALSE,
  pi = c(0.05, 0.95),
  ci = c(0.025, 0.975), 
  facet = "columns",
  show = list(obs_dv = TRUE), 
  vpc_theme = mrg_vpc_theme
)

p1 <- p1 + 
  xlab("Time (hr)") + 
  ylab("VPC: Theophylline Concentration (mg/L)")

p1
```

# Bootstrap

```{r}
BS_DIR <- here::here("model/nonmem/basic","boot")
BS_DATA_DIR <- here::here(BS_DIR, "data")

if(!dir.exists(BS_DIR)) dir.create(BS_DIR)
if(!dir.exists(BS_DATA_DIR)) dir.create(BS_DATA_DIR)
```

```{r, eval=FALSE}

template_ctl <- readLines(
  file.path(model_dir, "2bs.ctl")
)

RUN <- seq(50)

set.seed(12345)

nmdata<-dataall
names(nmdata)<-c("ID", "BW", "DOSE", "TIME", "DV", "AMT", "MDV", "CMT", "NUM")


make_boot_run <- function(n, data, template, boot_dir, strat_cols = NULL, 
                          overwrite = FALSE,  seed = 21181){
  
  if (n %% 100 == 0) message(glue("Created {n} bootstrap data sets"))
  mod_name <- str_pad(paste0(n), width=3, pad="0")
  
  mod_path <- glue("{boot_dir}/{mod_name}")
  
  if(file.exists(paste0(mod_path, ".yaml")) && !overwrite) {
    return(read_model(mod_path))
  }
  
   data_new <- resample_df(
    data,
    key_cols = "ID",
    strat_cols = strat_cols)
  
  data_new <- rename(data_new, OID = ID, ID = KEY)
  data_new <- select(data_new, unique(c(names(data), "OID")))
  csv_file <- glue("{boot_dir}/data/{mod_name}.csv")
  fwrite(data_new, csv_file , na = '.', quote = FALSE, col.names = FALSE )
  new_ctl <- whisker.render(template, list(run_num = mod_name))
  write_file(new_ctl, file = paste0(mod_path, ".ctl"))
  
  mod <- new_model(
    mod_path,
    .description = glue("bootstrap {mod_name}"), 
    .overwrite = overwrite)
  
  mod
}

models <- map(
  RUN, 
  data = nmdata, 
  .f = make_boot_run, 
  template = template_ctl, 
  boot_dir = BS_DIR, 
  strat_cols = NULL,
  overwrite = TRUE
)


```

```{r, eval=FALSE}
#bbi.yaml file needs to be in boot folder

out <- submit_models(
  models,
  .config_path = here("model/nonmem/basic/bbi.yaml"),
  .bbi_args = list(overwrite = TRUE, threads = 1)
)
```

Summary of parameter estimates:

```{r}

boot <- param_estimates_batch(BS_DIR)
err <- filter(boot, !is.na(error_msg))
nrow(err)

param_estimates_compare(boot, mod2)%>% 
  kableExtra::kable()
```

# AUC, Cmax, Cmin

Simulated basic summaries of PK profile at steady-state conditions:

```{r}

dose_rec <- filter(join_df, EVID==1) %>%
  distinct(ID,AMT,ETA1,ETA2,ETA3) %>% 
  mutate(II = 24, SS = 1, TIME = 0, EVID = 1, CMT = 2)

simmod <- update(simmod, delta = 0.1, end = 24)

out <- mrgsim(
  simmod, 
  data      = dose_rec, 
  etasrc    = "data.all")

maxmin <- 
  out %>% 
  group_by(ID) %>% 
  filter(TIME>0) %>% 
  summarise(Cmax = max(IPRED), Cmin = min(IPRED), .groups = "drop")

auc <- 
  out %>% 
  group_by(ID) %>% 
  summarise(AUC = trapz(TIME, IPRED), .groups = "drop")

pk <- left_join(maxmin, auc, by = c("ID"))

pmtab <- pt_cont_long(
  pk, 
  cols = "AUC, Cmax, Cmin" ,
  summarize_all = FALSE
)

pmtab$data %>%
  kableExtra::kable("html") %>%
   kableExtra::kable_styling("striped") %>%
  kableExtra::save_kable(paste0(here::here("deliv/tables"),"/auccmaxcmin", ".png"),zoom = 1.5)

pmtab$data %>% 
  kableExtra::kable()

```
